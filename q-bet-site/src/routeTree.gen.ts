/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RoutesImport } from './routes/routes'
import { Route as AppRouterImport } from './routes/AppRouter'
import { Route as RouterUtilImport } from './routes/router.util'

// Create/Update Routes

const RoutesRoute = RoutesImport.update({
  id: '/routes',
  path: '/routes',
  getParentRoute: () => rootRoute,
} as any)

const AppRouterRoute = AppRouterImport.update({
  id: '/AppRouter',
  path: '/AppRouter',
  getParentRoute: () => rootRoute,
} as any)

const RouterUtilRoute = RouterUtilImport.update({
  id: '/router/util',
  path: '/router/util',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/AppRouter': {
      id: '/AppRouter'
      path: '/AppRouter'
      fullPath: '/AppRouter'
      preLoaderRoute: typeof AppRouterImport
      parentRoute: typeof rootRoute
    }
    '/routes': {
      id: '/routes'
      path: '/routes'
      fullPath: '/routes'
      preLoaderRoute: typeof RoutesImport
      parentRoute: typeof rootRoute
    }
    '/router/util': {
      id: '/router/util'
      path: '/router/util'
      fullPath: '/router/util'
      preLoaderRoute: typeof RouterUtilImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/AppRouter': typeof AppRouterRoute
  '/routes': typeof RoutesRoute
  '/router/util': typeof RouterUtilRoute
}

export interface FileRoutesByTo {
  '/AppRouter': typeof AppRouterRoute
  '/routes': typeof RoutesRoute
  '/router/util': typeof RouterUtilRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/AppRouter': typeof AppRouterRoute
  '/routes': typeof RoutesRoute
  '/router/util': typeof RouterUtilRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/AppRouter' | '/routes' | '/router/util'
  fileRoutesByTo: FileRoutesByTo
  to: '/AppRouter' | '/routes' | '/router/util'
  id: '__root__' | '/AppRouter' | '/routes' | '/router/util'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRouterRoute: typeof AppRouterRoute
  RoutesRoute: typeof RoutesRoute
  RouterUtilRoute: typeof RouterUtilRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRouterRoute: AppRouterRoute,
  RoutesRoute: RoutesRoute,
  RouterUtilRoute: RouterUtilRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/AppRouter",
        "/routes",
        "/router/util"
      ]
    },
    "/AppRouter": {
      "filePath": "AppRouter.tsx"
    },
    "/routes": {
      "filePath": "routes.tsx"
    },
    "/router/util": {
      "filePath": "router.util.ts"
    }
  }
}
ROUTE_MANIFEST_END */
