/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RoutesImport } from './routes/routes'
import { Route as ProfileImport } from './routes/profile'
import { Route as MainImport } from './routes/main'
import { Route as HomeImport } from './routes/home'
import { Route as AboutImport } from './routes/about'
import { Route as RouterImport } from './routes/Router'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const RoutesRoute = RoutesImport.update({
  id: '/routes',
  path: '/routes',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const MainRoute = MainImport.update({
  id: '/main',
  path: '/main',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const RouterRoute = RouterImport.update({
  id: '/Router',
  path: '/Router',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Router': {
      id: '/Router'
      path: '/Router'
      fullPath: '/Router'
      preLoaderRoute: typeof RouterImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/main': {
      id: '/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/routes': {
      id: '/routes'
      path: '/routes'
      fullPath: '/routes'
      preLoaderRoute: typeof RoutesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Router': typeof RouterRoute
  '/about': typeof AboutRoute
  '/home': typeof HomeRoute
  '/main': typeof MainRoute
  '/profile': typeof ProfileRoute
  '/routes': typeof RoutesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Router': typeof RouterRoute
  '/about': typeof AboutRoute
  '/home': typeof HomeRoute
  '/main': typeof MainRoute
  '/profile': typeof ProfileRoute
  '/routes': typeof RoutesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Router': typeof RouterRoute
  '/about': typeof AboutRoute
  '/home': typeof HomeRoute
  '/main': typeof MainRoute
  '/profile': typeof ProfileRoute
  '/routes': typeof RoutesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Router'
    | '/about'
    | '/home'
    | '/main'
    | '/profile'
    | '/routes'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/Router' | '/about' | '/home' | '/main' | '/profile' | '/routes'
  id:
    | '__root__'
    | '/'
    | '/Router'
    | '/about'
    | '/home'
    | '/main'
    | '/profile'
    | '/routes'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RouterRoute: typeof RouterRoute
  AboutRoute: typeof AboutRoute
  HomeRoute: typeof HomeRoute
  MainRoute: typeof MainRoute
  ProfileRoute: typeof ProfileRoute
  RoutesRoute: typeof RoutesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RouterRoute: RouterRoute,
  AboutRoute: AboutRoute,
  HomeRoute: HomeRoute,
  MainRoute: MainRoute,
  ProfileRoute: ProfileRoute,
  RoutesRoute: RoutesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Router",
        "/about",
        "/home",
        "/main",
        "/profile",
        "/routes"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Router": {
      "filePath": "Router.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/main": {
      "filePath": "main.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/routes": {
      "filePath": "routes.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
